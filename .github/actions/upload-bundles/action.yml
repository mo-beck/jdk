#
# Copyright (c) 2022, 2024, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

name: 'Upload bundles'
description: 'Upload resulting JDK bundles'
inputs:
  platform:
    description: 'Platform name'
    required: true
  debug-suffix:
    description: 'File name suffix denoting debug level, possibly empty'
    required: false
  bundle-suffix:
    description: 'Bundle name suffix, possibly empty'
    required: false
  static-suffix:
    description: 'Static JDK bundle name suffix, possibly empty'
    required: false

runs:
  using: composite
  steps:

    - name: 'Determine bundle names'
      id: bundles
      run: |
        echo "Looking for artifacts in build directory..."
        find build -type f \( -name "*.zip" -o -name "*.tar.gz" \) -ls
        
        # Search in both images and lib directories for HotSpot/JDK artifacts
        echo "Scanning build directories recursively for artifacts..."
        find build -type f \( -name "*.so" -o -name "*.dll" \) -ls
        
        # First look for pre-made bundles
        jdk_bundle_zip="$(find build -type f \( \
          -name "jdk-*_bin.zip" -o \
          -name "hotspot*.zip" \
        \) -print 2> /dev/null | head -1 || true)"
        
        jdk_bundle_tar_gz="$(find build -type f \( \
          -name "jdk-*_bin.tar.gz" -o \
          -name "hotspot*.tar.gz" \
        \) -print 2> /dev/null | head -1 || true)"
        
        # Also look in the jdk/lib/server directory for HotSpot library
        if [[ -z "$jdk_bundle_zip" && -z "$jdk_bundle_tar_gz" ]]; then
          hotspot_lib="$(find build -type f \( -name "jvm.dll" -o -name "libjvm.so" -o -name "libjvm.dylib" \) 2> /dev/null | head -1 || true)"
          if [[ -n "$hotspot_lib" ]]; then
            parent_dir="$(dirname "$(dirname "$hotspot_lib")")"
            work_dir="$(pwd)"
            echo "Creating archive from HotSpot library at $hotspot_lib"
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              archive_name="$work_dir/hotspot.zip"
              (cd "$parent_dir" && zip -r "$archive_name" .)
              jdk_bundle_zip="$archive_name"
            else
              archive_name="$work_dir/hotspot.tar.gz"
              (cd "$parent_dir" && tar czf "$archive_name" .)
              jdk_bundle_tar_gz="$archive_name"
            fi
          fi
        fi
        
        static_jdk_bundle_zip="$(ls build/*/bundles/static-jdk-*_bin${{ inputs.debug-suffix }}.zip 2> /dev/null || true)"
        static_jdk_bundle_tar_gz="$(ls build/*/bundles/static-jdk-*_bin${{ inputs.debug-suffix }}.tar.gz 2> /dev/null || true)"
        symbols_bundle="$(ls build/*/bundles/jdk-*_bin${{ inputs.debug-suffix }}-symbols.tar.gz 2> /dev/null || true)"
        tests_bundle="$(ls build/*/bundles/jdk-*_bin-tests${{ inputs.debug-suffix }}.tar.gz 2> /dev/null || true)"
        static_libs_bundle="$(ls build/*/bundles/jdk-*_bin-static-libs${{ inputs.debug-suffix }}.tar.gz 2> /dev/null || true)"

        mkdir bundles

        # Debug output
        echo "Found artifacts:"
        [ -n "$jdk_bundle_zip" ] && echo "JDK/HotSpot ZIP: $jdk_bundle_zip"
        [ -n "$jdk_bundle_tar_gz" ] && echo "JDK/HotSpot TAR.GZ: $jdk_bundle_tar_gz"
        [ -n "$static_jdk_bundle_zip" ] && echo "Static JDK ZIP: $static_jdk_bundle_zip"
        [ -n "$static_jdk_bundle_tar_gz" ] && echo "Static JDK TAR.GZ: $static_jdk_bundle_tar_gz"
        [ -n "$symbols_bundle" ] && echo "Symbols bundle: $symbols_bundle"
        [ -n "$tests_bundle" ] && echo "Tests bundle: $tests_bundle"
        [ -n "$static_libs_bundle" ] && echo "Static libs bundle: $static_libs_bundle"

        # Move found artifacts to bundles directory
        if [[ "$jdk_bundle_zip" != "" ]]; then
          # Normalize to jdk- prefix for all builds
          mv "$jdk_bundle_zip" "bundles/jdk-${{ inputs.platform }}${{ inputs.debug-suffix }}.zip"
        fi
        if [[ "$jdk_bundle_tar_gz" != "" ]]; then
          # Normalize to jdk- prefix for all builds  
          mv "$jdk_bundle_tar_gz" "bundles/jdk-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz"
        fi
        if [[ "$static_jdk_bundle_zip" != "" ]]; then
          mv "$static_jdk_bundle_zip" "bundles/jdk-${{ inputs.platform }}${{ inputs.debug-suffix }}${{ inputs.static-suffix }}.zip"
        fi
        if [[ "$static_jdk_bundle_tar_gz" != "" ]]; then
          mv "$static_jdk_bundle_tar_gz" "bundles/jdk-${{ inputs.platform }}${{ inputs.debug-suffix }}${{ inputs.static-suffix }}.tar.gz"
        fi
        if [[ "$symbols_bundle" != "" ]]; then
          mv "$symbols_bundle" "bundles/symbols-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz"
        fi
        if [[ "$tests_bundle" != "" ]]; then
          mv "$tests_bundle" "bundles/tests-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz"
        fi
        if [[ "$static_libs_bundle" != "" ]]; then
          mv "$static_libs_bundle" "bundles/static-libs-${{ inputs.platform }}${{ inputs.debug-suffix }}.tar.gz"
        fi

        if [[ "$jdk_bundle_zip$jdk_bundle_tar_gz$static_jdk_bundle_zip$static_jdk_bundle_tar_gz$symbols_bundle$tests_bundle$static_libs_bundle" != "" ]]; then
          echo 'bundles-found=true' >> $GITHUB_OUTPUT
        else
          echo 'bundles-found=false' >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: 'Upload bundles artifact'
      uses: actions/upload-artifact@v4
      with:
        name: hotspot-bundles-${{ inputs.platform }}${{ inputs.debug-suffix }}${{ inputs.static-suffix }}${{ inputs.bundle-suffix }}
        path: bundles
        retention-days: 1
      if: steps.bundles.outputs.bundles-found == 'true'
